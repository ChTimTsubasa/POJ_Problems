#include <iostream>
#include <stdio.h>
#include <queue>
using namespace std;

int qx, qy, zx, zy;
int m, n;
bool block[88][88];
int val[88][88];
int dist[88][88];

const int INFTY = 1e9;

bool inBoundSq(int i, int j){
	return i>=0 && i<m && j>=0 && j<n;
}

bool inBoundGr(int i, int j){
	return i>=0 && i<=m && j>=0 && j<=n;
}

bool isBlocked(int i, int j){
	return inBoundSq(i,j) && block[i][j];
}

bool onB(int i, int j){
	int dir[4][2] = {{0,0},{0,-1},{-1,0},{-1,-1}};
	for(int k = 0; k < 4; k++){
		int x = i+dir[k][0], y = j+dir[k][1];
		if(inBoundSq(x,y) && block[x][y]) return true;
	}
	return false;
}

void getVal(){
	queue<pair<int, int> >bfs;
	bool used[88][88] = {false};
	for(int i = 0; i <= m; i++){
		for(int j = 0; j <= n; j++){
			if(onB(i,j)){
				val[i][j] = m+n;
				used[i][j] = 1;
				bfs.push(pair<int,int>(i,j));
			}
		}
	}
	int dir[4][2] = {{-1,0},{0,1},{0,-1},{1,0}};

	while(!bfs.empty()){
		int curX = bfs.front().first, curY = bfs.front().second;
		bfs.pop();
		for(int k = 0; k < 4; k++){
			int nX = curX + dir[k][0], nY = curY + dir[k][1];
			if(inBoundGr(nX, nY) && !used[nX][nY]){
				val[nX][nY] = val[curX][curY] -1;
				used[nX][nY] = 1;
				bfs.push(pair<int, int>(nX,nY));
			}
		}
	}
}

struct info{
	int x,y,d;
	info(int x,int y,int d):x(x),y(y),d(d){}
};

bool operator<(const info& i1, const info& i2){
	return i1.d > i2.d;
}

bool canCross(int x, int y, int dx, int dy){
	if(dx==0 && dy==-1){
		return !isBlocked(x-1,y-1) || !isBlocked(x,y-1);
	}
	else if(dx==0 && dy==1){
		return !isBlocked(x-1,y) || !isBlocked(x,y);
	}
	else if(dx==-1 && dy==0){
		return !isBlocked(x-1,y-1) || !isBlocked(x-1,y);
	}
	else{
		return !isBlocked(x,y-1) || !isBlocked(x,y);
	}
}

int Dij(){
	if(qx==zx && qy==zy) return val[qx][qy];
	priority_queue<info> pq;
	bool dinged[88][88] = {false};
	for(int i = 0; i <= m; i++){
		for(int j = 0; j <= n; j++){
			dist[i][j] = INFTY;
		}
	}
	dist[qx][qy] = val[qx][qy];
	pq.push(info(qx,qy,val[qx][qy]));
	while(!pq.empty()){
		info Info(-1,-1,-1);
		while(!pq.empty()){
			info tmp = pq.top();
			pq.pop();
			if(!dinged[tmp.x][tmp.y]){
				Info = tmp;
				break;
			}
			//pq.pop();
		}
		if(Info.d == -1) break;
		if(Info.x == zx && Info.y == zy){
			return Info.d;
		}
		dinged[Info.x][Info.y] = 1;
		int dir[4][2] = {{-1,0},{0,-1},{1,0},{0,1}};
		for(int k = 0; k < 4; k++){
			int nX = Info.x+dir[k][0], nY = Info.y+dir[k][1];
			if(inBoundGr(nX,nY) && !dinged[nX][nY]){
				if(canCross(Info.x, Info.y, dir[k][0], dir[k][1])){
					int newDist = dist[Info.x][Info.y] + val[nX][nY];
					if(newDist < dist[nX][nY]){
						dist[nX][nY] = newDist;
						pq.push(info(nX,nY,newDist));
					}
				}
			}
		}
	}
	return INFTY;
}

int main() {
	int t;
	scanf("%d", &t);
	while(t--){
		scanf("%d%d%d%d%d%d",&m,&n,&qx,&qy,&zx,&zy);
		for(int i = 0; i < m; i++){
			char tmp[88];
			scanf("%s", tmp);
			for(int j = 0; j < n; j++){
				block[i][j] = (tmp[j] == '1');
			}
		}
		getVal();
		//cout << 1 << endl;
		int dij = Dij();
		if(dij < INFTY) printf("%d\n", dij);
		else printf("no solution\n");
	}
	return 0;
}
