#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include <assert.h>
#include <cstring>
#include <cmath>
using namespace std;

const int R = 110, C = 110;

int res[R][C];
bool jsed[R][C];
char ops[R][C][100];

void init(int r, int c){
	for(int i = 1; i <= r; i++){
		for(int j = 1; j <= c; j++){
			jsed[i][j] = false;
		}
	}
}

int parseZM(char *zm, int zml){
	int res = 1;
	for(int i = 1; i < zml; i++){
		res += (int)pow(26.0, i+0.0);
	}
	for(int i = 0; i < zml; i++){
		res += (zm[i]-'A') * (int)pow(26.0, zml-i-1.0);
	}
	return res;
}

void parse(int i, int j, vector<pair<int, int> > &vp){
	//out << i << j << endl;
	assert(ops[i][j][0] == '=');
	char *str = ops[i][j] + 1;
	int len = (int)strlen(str);
	//cout << "len="<< len << endl;
	int offset = 0;
	while(offset < len){
		//cout << "offset: " << offset << endl;
		char zm[4] = {'\0'}, sz[4] = {'\0'};
		int zmf=0, szf=0;
		while(offset < len && str[offset] != '+'){
			if(str[offset] >= 'A' && str[offset] <= 'Z'){
				zm[zmf++] = str[offset];
			}
			else{
				sz[szf++] = str[offset];
			}
			offset++;
		}
		offset++;
		int first = parseZM(zm, zmf), second = atoi(sz);
		vp.push_back(pair<int,int>(second,first));
	}
}

int getRes(int i, int j){

	if(jsed[i][j]) return res[i][j];
	//cout << i << " " << j << endl;
	vector<pair<int, int> >vp;
	parse(i,j,vp);
	int sz = vp.size();
	for(int k = 0; k < sz; k++){
		res[i][j] += getRes(vp[k].first, vp[k].second);
	}
	jsed[i][j] = 1;
	//cout << i << " " << j << endl;
	return res[i][j];
}

int main() {
	int tc;
	scanf("%d", &tc);
	while(tc--){
		int c,r;
		scanf("%d%d", &c, &r);
		init(r, c);
		for(int i = 1; i <= r; i++){
			for(int j = 1; j <= c; j++){
				scanf("%s", ops[i][j]);
				if(ops[i][j][0] != '='){
					int val = atoi(ops[i][j]);
					res[i][j] = val;
					jsed[i][j] = 1;
				}
			}
		}
		for(int i = 1; i <= r; i++){
			for(int j = 1; j <= c; j++){
				printf("%d ", getRes(i, j));
			}
			printf("\n");
		}
	}
	return 0;
}
