#include <iostream>
#include <stdio.h>
#include <string.h>
using namespace std;

char morse[10010];
int res[10010];
bool jsed[10010];

int nodeCnt;

void init(int len){
	res[len] = 1;
	jsed[len] = 1;
	for(int i = 0; i < len; i++){
		jsed[i] = 0;
		res[i] = 0;
	}
	nodeCnt = 1;
}

struct node{
	int zs;
	node *left, *right;
}nodes[1000000];

char code[26][5] = {"01", "1000", "1010", "100",
					"0", "0010", "110", "0000",
					"00", "0111", "101", "0100",
					"11", "10", "111", "0110",
					"1101", "010", "000", "1",
					"001", "0001", "011", "1001",
					"1011", "1100"};

int lens[26] = {2,4,4,3,1,4,3,4,2,4,3,4,2,2,3,4,4,3,3,1,3,4,3,4,4,4};

int getRes(int start, int len){
	if(jsed[start]) return res[start];
	//jsed[start] = 1;
	node *cur = &nodes[0];
	int st = start, re = 0;
	while(st < len && cur != NULL){
		if(morse[st] == '.') cur = cur->left;
		else cur = cur->right;
		if(!cur) break;
		if(cur->zs){
			re += getRes(st+1, len) * cur->zs;
		}
		st++;
	}
	res[start] = re;
	jsed[start] = 1;
	return re;
}

int main() {
	int tc;
	scanf("%d", &tc);
	while(tc--){
		scanf("%s", morse);
		int len = strlen(morse);
		init(len);
		int gs;
		scanf("%d", &gs);
		nodes[0].left = nodes[0].right = NULL;
		nodes[0].zs = 0;
		for(int i = 0; i < gs; i++){
			char word[21];
			scanf("%s", word);
			char buf[81] = {'\0'};
			int wl = strlen(word);
			int offset = 0;
			for(int j = 0; j < wl; j++){
				int pos = word[j] - 'A';
				for(int k = 0; k < lens[pos]; k++){
					buf[offset+k] = code[pos][k];
				}
				offset += lens[pos];
			}
			//printf("%s\n", buf);
			wl = offset; offset = 0;
			node *cur = &nodes[0];
			while(offset < wl){
				if(buf[offset] == '0'){
					//go left
					if(!cur->left){
						cur->left = &nodes[nodeCnt];
						cur->left->left = cur->left->right = NULL;
						cur->left->zs = 0;
						nodeCnt++;
					}
					cur = cur->left;
				}
				else{
					//go right
					if(!cur->right){
						cur->right = &nodes[nodeCnt];
						cur->right->left = cur->right->right = NULL;
						cur->right->zs = 0;
						nodeCnt++;
					}
					cur = cur->right;
				}
				offset++;
			}
			cur->zs++;
		}
		printf("%d\n", getRes(0, len));
	}
	return 0;
}
